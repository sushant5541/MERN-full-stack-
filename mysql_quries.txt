
CREATE DATABASE ecommerce;

USE ecommerce;

CREATE TABLE customer (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    city VARCHAR(50)
);

CREATE TABLE product (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
);

INSERT INTO customer (name, email, city) VALUES
('Alice', 'alice@example.com', 'New York'),
('Bob', 'bob@example.com', 'Los Angeles'),
('Charlie', 'charlie@example.com', 'Chicago'),
('David', 'david@example.com', 'Houston'),
('Eva', 'eva@example.com', 'Phoenix'),
('Frank', 'frank@example.com', 'Philadelphia'),
('Grace', 'grace@example.com', 'San Antonio'),
('Henry', 'henry@example.com', 'San Diego'),
('Ivy', 'ivy@example.com', 'Dallas'),
('Jack', 'jack@example.com', 'San Jose');


INSERT INTO product (product_name, price, customer_id) VALUES
('Laptop', 1200.00, 1),
('Smartphone', 800.00, 2),
('Tablet', 600.00, 3),
('Headphones', 150.00, 4),
('Smartwatch', 250.00, 5),
('Camera', 700.00, 6),
('Printer', 300.00, 7),
('Monitor', 400.00, 8),
('Keyboard', 50.00, 9),
('Mouse', 30.00, 10);


SELECT c.name, c.email, p.product_name, p.price
FROM customer c
INNER JOIN product p ON c.customer_id = p.customer_id;



SELECT c.name, COUNT(p.product_id) AS total_products
FROM customer c
INNER JOIN product p ON c.customer_id = p.customer_id
GROUP BY c.name;

SELECT c.city, SUM(p.price) AS total_revenue
FROM customer c
INNER JOIN product p ON c.customer_id = p.customer_id
GROUP BY c.city;


SELECT c.name, c.email
FROM customer c
LEFT JOIN product p ON c.customer_id = p.customer_id
WHERE p.product_id IS NULL;

SELECT c.name, c.email, p.product_name, p.price
FROM customer c
INNER JOIN product p ON c.customer_id = p.customer_id
WHERE p.price = (SELECT MAX(price) FROM product);

SELECT c.name, SUM(p.price) AS total_spent
FROM customer c
INNER JOIN product p ON c.customer_id = p.customer_id
GROUP BY c.customer_id
HAVING total_spent > (SELECT AVG(price) FROM product);




